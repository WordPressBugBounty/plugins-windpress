import { m as useForwardExpose, P as Primitive, t as tv, h as useAppConfig, n as formFieldInjectionKey, o as inputIdInjectionKey } from "../assets/dashboard-DFjbSBbe.js";
import { m as defineComponent, X as createBlock, a1 as openBlock, Y as withCtx, am as renderSlot, an as mergeProps, u as unref, ao as useSlots, ac as computed, ab as inject, V as ref, ap as useId, aq as provide, Z as createBaseVNode, aj as normalizeClass, _ as createElementBlock, $ as createCommentVNode, j as createVNode, a3 as createTextVNode, a2 as toDisplayString } from "./runtime-core.esm-bundler-hRyeZ98I.min.js";
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "Label",
  props: {
    for: {},
    asChild: { type: Boolean },
    as: { default: "label" }
  },
  setup(__props) {
    const props = __props;
    useForwardExpose();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), mergeProps(props, {
        onMousedown: _cache[0] || (_cache[0] = (event) => {
          if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
        })
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});
const theme = {
  "slots": {
    "root": "",
    "wrapper": "",
    "labelWrapper": "flex content-center items-center justify-between",
    "label": "block font-medium text-default",
    "container": "mt-1 relative",
    "description": "text-muted",
    "error": "mt-2 text-error",
    "hint": "text-muted",
    "help": "mt-2 text-muted"
  },
  "variants": {
    "size": {
      "xs": {
        "root": "text-xs"
      },
      "sm": {
        "root": "text-xs"
      },
      "md": {
        "root": "text-sm"
      },
      "lg": {
        "root": "text-sm"
      },
      "xl": {
        "root": "text-base"
      }
    },
    "required": {
      "true": {
        "label": "after:content-['*'] after:ms-0.5 after:text-error"
      }
    }
  },
  "defaultVariants": {
    "size": "md"
  }
};
const _hoisted_1 = ["id"];
const _hoisted_2 = ["id"];
const _hoisted_3 = ["id"];
const _sfc_main = {
  __name: "FormField",
  props: {
    as: { type: null, required: false },
    name: { type: String, required: false },
    errorPattern: { type: null, required: false },
    label: { type: String, required: false },
    description: { type: String, required: false },
    help: { type: String, required: false },
    error: { type: [String, Boolean], required: false },
    hint: { type: String, required: false },
    size: { type: null, required: false },
    required: { type: Boolean, required: false },
    eagerValidation: { type: Boolean, required: false },
    validateOnInputDelay: { type: Number, required: false },
    class: { type: null, required: false },
    ui: { type: null, required: false }
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const appConfig = useAppConfig();
    const ui = computed(() => {
      var _a;
      return tv({ extend: tv(theme), ...((_a = appConfig.ui) == null ? void 0 : _a.formField) || {} })({
        size: props.size,
        required: props.required
      });
    });
    const formErrors = inject("form-errors", null);
    const error = computed(() => {
      var _a, _b;
      return props.error || ((_b = (_a = formErrors == null ? void 0 : formErrors.value) == null ? void 0 : _a.find((error2) => error2.name && (error2.name === props.name || props.errorPattern && error2.name.match(props.errorPattern)))) == null ? void 0 : _b.message);
    });
    const id = ref(useId());
    const ariaId = id.value;
    provide(inputIdInjectionKey, id);
    provide(formFieldInjectionKey, computed(() => ({
      error: error.value,
      name: props.name,
      size: props.size,
      eagerValidation: props.eagerValidation,
      validateOnInputDelay: props.validateOnInputDelay,
      errorPattern: props.errorPattern,
      hint: props.hint,
      description: props.description,
      help: props.help,
      ariaId
    })));
    return (_ctx, _cache) => {
      var _a;
      return openBlock(), createBlock(unref(Primitive), {
        as: __props.as,
        class: normalizeClass(ui.value.root({ class: [(_a = props.ui) == null ? void 0 : _a.root, props.class] }))
      }, {
        default: withCtx(() => {
          var _a2, _b, _c, _d, _e, _f, _g, _h;
          return [
            createBaseVNode("div", {
              class: normalizeClass(ui.value.wrapper({ class: (_a2 = props.ui) == null ? void 0 : _a2.wrapper }))
            }, [
              __props.label || !!slots.label ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(ui.value.labelWrapper({ class: (_b = props.ui) == null ? void 0 : _b.labelWrapper }))
              }, [
                createVNode(unref(_sfc_main$1), {
                  for: id.value,
                  class: normalizeClass(ui.value.label({ class: (_c = props.ui) == null ? void 0 : _c.label }))
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "label", { label: __props.label }, () => [
                      createTextVNode(toDisplayString(__props.label), 1)
                    ])
                  ]),
                  _: 3
                }, 8, ["for", "class"]),
                __props.hint || !!slots.hint ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  id: `${unref(ariaId)}-hint`,
                  class: normalizeClass(ui.value.hint({ class: (_d = props.ui) == null ? void 0 : _d.hint }))
                }, [
                  renderSlot(_ctx.$slots, "hint", { hint: __props.hint }, () => [
                    createTextVNode(toDisplayString(__props.hint), 1)
                  ])
                ], 10, _hoisted_1)) : createCommentVNode("", true)
              ], 2)) : createCommentVNode("", true),
              __props.description || !!slots.description ? (openBlock(), createElementBlock("p", {
                key: 1,
                id: `${unref(ariaId)}-description`,
                class: normalizeClass(ui.value.description({ class: (_e = props.ui) == null ? void 0 : _e.description }))
              }, [
                renderSlot(_ctx.$slots, "description", { description: __props.description }, () => [
                  createTextVNode(toDisplayString(__props.description), 1)
                ])
              ], 10, _hoisted_2)) : createCommentVNode("", true)
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass([(__props.label || !!slots.label || __props.description || !!slots.description) && ui.value.container({ class: (_f = props.ui) == null ? void 0 : _f.container })])
            }, [
              renderSlot(_ctx.$slots, "default", { error: error.value }),
              typeof error.value === "string" && error.value || !!slots.error ? (openBlock(), createElementBlock("div", {
                key: 0,
                id: `${unref(ariaId)}-error`,
                class: normalizeClass(ui.value.error({ class: (_g = props.ui) == null ? void 0 : _g.error }))
              }, [
                renderSlot(_ctx.$slots, "error", { error: error.value }, () => [
                  createTextVNode(toDisplayString(error.value), 1)
                ])
              ], 10, _hoisted_3)) : __props.help || !!slots.help ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(ui.value.help({ class: (_h = props.ui) == null ? void 0 : _h.help }))
              }, [
                renderSlot(_ctx.$slots, "help", { help: __props.help }, () => [
                  createTextVNode(toDisplayString(__props.help), 1)
                ])
              ], 2)) : createCommentVNode("", true)
            ], 2)
          ];
        }),
        _: 3
      }, 8, ["as", "class"]);
    };
  }
};
export {
  _sfc_main as _,
  _sfc_main$1 as a
};
