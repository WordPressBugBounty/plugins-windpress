import { O as useDashboard, Q as useResizable, K as tv, s as useAppConfig, R as _sfc_main$3, S as _sfc_main$4, v as _sfc_main$5, P as Primitive, T as useForwardProps, U as useLocalePro, z as _sfc_main$6, __tla as __tla_0 } from "../assets/dashboard-B8j97Vsq.js";
import { M as useId, q as toRef, f as computed, U as createElementBlock, a6 as createBaseVNode, H as renderSlot, R as normalizeStyle, a4 as normalizeClass, u as unref, F as Fragment, E as openBlock, D as createBlock, O as createCommentVNode, a5 as useSlots, N as createVNode, G as withCtx, _ as normalizeProps, $ as guardReactiveProps, A as mergeProps, a2 as createTextVNode, a3 as toDisplayString, r as ref } from "./runtime-core.esm-bundler-BkeE3T8c.min.js";
import { h as createReusableTemplate, r as reactivePick } from "./index-DVDdEdAO.min.js";
let _sfc_main$2, _sfc_main$1, _sfc_main;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })()
]).then(async () => {
  const theme$2 = {
    "slots": {
      "root": "relative flex flex-col min-w-0 min-h-svh lg:not-last:border-r lg:not-last:border-default shrink-0",
      "body": "flex flex-col gap-4 sm:gap-6 flex-1 overflow-y-auto p-4 sm:p-6",
      "handle": ""
    },
    "variants": {
      "size": {
        "true": {
          "root": "w-full lg:w-(--width)"
        },
        "false": {
          "root": "flex-1"
        }
      }
    }
  };
  const _hoisted_1 = [
    "data-dragging"
  ];
  _sfc_main$2 = {
    __name: "DashboardPanel",
    props: {
      class: {
        type: null,
        required: false
      },
      ui: {
        type: null,
        required: false
      },
      id: {
        type: String,
        required: false
      },
      minSize: {
        type: Number,
        required: false,
        default: 15
      },
      maxSize: {
        type: Number,
        required: false
      },
      defaultSize: {
        type: Number,
        required: false
      },
      resizable: {
        type: Boolean,
        required: false,
        default: false
      }
    },
    setup(__props) {
      const props = __props;
      const appConfig = useAppConfig();
      const dashboardContext = useDashboard({
        storageKey: "dashboard",
        unit: "%"
      });
      const id = `${dashboardContext.storageKey}-panel-${props.id || useId()}`;
      const { el, size, isDragging, onMouseDown, onTouchStart } = useResizable(id, toRef(() => ({
        ...dashboardContext,
        ...props
      })));
      const ui = computed(() => {
        var _a;
        return tv({
          extend: tv(theme$2),
          ...((_a = appConfig.uiPro) == null ? void 0 : _a.dashboardPanel) || {}
        })({
          size: !!size.value
        });
      });
      return (_ctx, _cache) => {
        var _a;
        const _component_UDashboardResizeHandle = _sfc_main$3;
        return openBlock(), createElementBlock(Fragment, null, [
          createBaseVNode("div", {
            id,
            ref_key: "el",
            ref: el,
            "data-dragging": unref(isDragging),
            class: normalizeClass(ui.value.root({
              class: [
                props.class,
                (_a = props.ui) == null ? void 0 : _a.root
              ]
            })),
            style: normalizeStyle([
              unref(size) ? {
                "--width": `${unref(size)}${unref(dashboardContext).unit}`
              } : void 0
            ])
          }, [
            renderSlot(_ctx.$slots, "default", {}, () => {
              var _a2;
              return [
                renderSlot(_ctx.$slots, "header"),
                createBaseVNode("div", {
                  class: normalizeClass(ui.value.body({
                    class: (_a2 = props.ui) == null ? void 0 : _a2.body
                  }))
                }, [
                  renderSlot(_ctx.$slots, "body")
                ], 2),
                renderSlot(_ctx.$slots, "footer")
              ];
            })
          ], 14, _hoisted_1),
          renderSlot(_ctx.$slots, "resize-handle", {
            onMouseDown: unref(onMouseDown),
            onTouchStart: unref(onTouchStart)
          }, () => {
            var _a2;
            return [
              __props.resizable ? (openBlock(), createBlock(_component_UDashboardResizeHandle, {
                key: 0,
                "aria-controls": id,
                class: normalizeClass(ui.value.handle({
                  class: (_a2 = props.ui) == null ? void 0 : _a2.handle
                })),
                onMousedown: unref(onMouseDown),
                onTouchstart: unref(onTouchStart)
              }, null, 8, [
                "class",
                "onMousedown",
                "onTouchstart"
              ])) : createCommentVNode("", true)
            ];
          })
        ], 64);
      };
    }
  };
  const theme$1 = {
    "slots": {
      "root": "h-(--ui-header-height) shrink-0 flex items-center justify-between border-b border-default px-4 sm:px-6 gap-1.5",
      "left": "flex items-center gap-1.5 min-w-0",
      "icon": "shrink-0 size-5 self-center me-1.5",
      "title": "flex items-center gap-1.5 font-semibold text-highlighted truncate",
      "center": "hidden lg:flex",
      "right": "flex items-center shrink-0 gap-1.5",
      "toggle": ""
    },
    "variants": {
      "toggleSide": {
        "left": {
          "toggle": ""
        },
        "right": {
          "toggle": ""
        }
      }
    }
  };
  _sfc_main$1 = {
    __name: "DashboardNavbar",
    props: {
      as: {
        type: null,
        required: false
      },
      icon: {
        type: String,
        required: false
      },
      title: {
        type: String,
        required: false
      },
      toggle: {
        type: [
          Boolean,
          Object
        ],
        required: false,
        default: true
      },
      toggleSide: {
        type: String,
        required: false,
        default: "left"
      },
      class: {
        type: null,
        required: false
      },
      ui: {
        type: null,
        required: false
      }
    },
    setup(__props) {
      const props = __props;
      const slots = useSlots();
      const appConfig = useAppConfig();
      const dashboardContext = useDashboard({});
      const [DefineToggleTemplate, ReuseToggleTemplate] = createReusableTemplate();
      const ui = computed(() => {
        var _a;
        return tv({
          extend: tv(theme$1),
          ...((_a = appConfig.uiPro) == null ? void 0 : _a.dashboardNavbar) || {}
        })();
      });
      return (_ctx, _cache) => {
        var _a;
        const _component_UDashboardSidebarToggle = _sfc_main$4;
        const _component_UIcon = _sfc_main$5;
        return openBlock(), createElementBlock(Fragment, null, [
          createVNode(unref(DefineToggleTemplate), null, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "toggle", normalizeProps(guardReactiveProps(unref(dashboardContext))), () => {
                var _a2;
                return [
                  __props.toggle ? (openBlock(), createBlock(_component_UDashboardSidebarToggle, mergeProps({
                    key: 0
                  }, typeof __props.toggle === "object" ? __props.toggle : {}, {
                    side: __props.toggleSide,
                    class: ui.value.toggle({
                      class: (_a2 = props.ui) == null ? void 0 : _a2.toggle,
                      toggleSide: __props.toggleSide
                    })
                  }), null, 16, [
                    "side",
                    "class"
                  ])) : createCommentVNode("", true)
                ];
              })
            ]),
            _: 3
          }),
          createVNode(unref(Primitive), {
            as: __props.as,
            class: normalizeClass(ui.value.root({
              class: [
                props.class,
                (_a = props.ui) == null ? void 0 : _a.root
              ]
            }))
          }, {
            default: withCtx(() => {
              var _a2, _b, _c;
              return [
                createBaseVNode("div", {
                  class: normalizeClass(ui.value.left({
                    class: (_a2 = props.ui) == null ? void 0 : _a2.left
                  }))
                }, [
                  __props.toggleSide === "left" ? (openBlock(), createBlock(unref(ReuseToggleTemplate), {
                    key: 0
                  })) : createCommentVNode("", true),
                  renderSlot(_ctx.$slots, "left", normalizeProps(guardReactiveProps(unref(dashboardContext))), () => {
                    var _a3;
                    return [
                      renderSlot(_ctx.$slots, "leading", normalizeProps(guardReactiveProps(unref(dashboardContext))), () => {
                        var _a4;
                        return [
                          __props.icon ? (openBlock(), createBlock(_component_UIcon, {
                            key: 0,
                            name: __props.icon,
                            class: normalizeClass(ui.value.icon({
                              class: (_a4 = props.ui) == null ? void 0 : _a4.icon
                            }))
                          }, null, 8, [
                            "name",
                            "class"
                          ])) : createCommentVNode("", true)
                        ];
                      }),
                      createBaseVNode("h1", {
                        class: normalizeClass(ui.value.title({
                          class: (_a3 = props.ui) == null ? void 0 : _a3.title
                        }))
                      }, [
                        renderSlot(_ctx.$slots, "title", {}, () => [
                          createTextVNode(toDisplayString(__props.title), 1)
                        ])
                      ], 2),
                      renderSlot(_ctx.$slots, "trailing", normalizeProps(guardReactiveProps(unref(dashboardContext))))
                    ];
                  })
                ], 2),
                !!slots.default ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(ui.value.center({
                    class: (_b = props.ui) == null ? void 0 : _b.center
                  }))
                }, [
                  renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(unref(dashboardContext))))
                ], 2)) : createCommentVNode("", true),
                createBaseVNode("div", {
                  class: normalizeClass(ui.value.right({
                    class: (_c = props.ui) == null ? void 0 : _c.right
                  }))
                }, [
                  renderSlot(_ctx.$slots, "right", normalizeProps(guardReactiveProps(unref(dashboardContext)))),
                  __props.toggleSide === "right" ? (openBlock(), createBlock(unref(ReuseToggleTemplate), {
                    key: 0
                  })) : createCommentVNode("", true)
                ], 2)
              ];
            }),
            _: 3
          }, 8, [
            "as",
            "class"
          ])
        ], 64);
      };
    }
  };
  const theme = {
    "base": "hidden lg:flex",
    "variants": {
      "side": {
        "left": "",
        "right": ""
      }
    }
  };
  _sfc_main = {
    __name: "DashboardSidebarCollapse",
    props: {
      side: {
        type: String,
        required: false,
        default: "left"
      },
      color: {
        type: null,
        required: false,
        default: "neutral"
      },
      variant: {
        type: null,
        required: false,
        default: "ghost"
      },
      class: {
        type: null,
        required: false
      }
    },
    setup(__props) {
      const props = __props;
      const rootProps = useForwardProps(reactivePick(props, "color", "variant", "size"));
      const { t } = useLocalePro();
      const appConfig = useAppConfig();
      const { sidebarCollapsed, collapseSidebar } = useDashboard({
        sidebarCollapsed: ref(false),
        collapseSidebar: () => {
        }
      });
      const ui = computed(() => {
        var _a;
        return tv({
          extend: tv(theme),
          ...((_a = appConfig.uiPro) == null ? void 0 : _a.dashboardSidebarCollapse) || {}
        });
      });
      return (_ctx, _cache) => {
        const _component_UButton = _sfc_main$6;
        return openBlock(), createBlock(_component_UButton, mergeProps(unref(rootProps), {
          "aria-label": unref(sidebarCollapsed) ? unref(t)("dashboardSidebarCollapse.expand") : unref(t)("dashboardSidebarCollapse.collapse"),
          icon: unref(sidebarCollapsed) ? unref(appConfig).ui.icons.panelOpen : unref(appConfig).ui.icons.panelClose,
          class: ui.value({
            class: props.class,
            side: props.side
          }),
          onClick: _cache[0] || (_cache[0] = ($event) => {
            var _a;
            return (_a = unref(collapseSidebar)) == null ? void 0 : _a(!unref(sidebarCollapsed));
          })
        }), null, 16, [
          "aria-label",
          "icon",
          "class"
        ]);
      };
    }
  };
});
export {
  _sfc_main$2 as _,
  __tla,
  _sfc_main$1 as a,
  _sfc_main as b
};
